{"version":3,"sources":["users.js"],"names":["Users","req","res","user","name","body","role","position","password","bcrypt","hashSync","updatedFile","func","updateFile","status","json","TYPE","message","info","getUser","readFile","params","checkPassword","compareSync","token","jwt","sign","expiresIn","deletedFile","deleteFile"],"mappings":"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","file":"users.js","sourceRoot":"C:/Users/Peerless/Documents/mine/nodes/Bootcamp/Store-Manager/src/controller","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport func from '../middlewares/functions';\r\n\r\nclass Users {\r\n  // Module that create new user\r\n  static createUser(req, res) {\r\n    const user = {\r\n      name: req.body.name,\r\n      role: req.body.role,\r\n      position: req.body.position,\r\n      password: req.body.password,\r\n    };\r\n\r\n    user.password = bcrypt.hashSync(req.body.password, 10);\r\n\r\n    const updatedFile = func.updateFile('users', user, req.body.name);\r\n\r\n    if (updatedFile === 'error') {\r\n      return res.status(403).json({\r\n        TYPE: 'GET',\r\n        status: 403,\r\n        message: 'Your request was not succesfull',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      TYPE: 'POST',\r\n      status: 200,\r\n      info: {\r\n        name: req.body.name,\r\n        role: req.body.role,\r\n        position: req.body.position,\r\n        password: req.body.password,\r\n      },\r\n      message: 'User Created Successfully',\r\n    });\r\n  }\r\n\r\n  // Module that logs in users\r\n  static loginUser(req, res) {\r\n    const getUser = func.readFile('users', req.params.name);\r\n    const { password } = getUser[req.body.name];\r\n\r\n    const checkPassword = bcrypt.compareSync(req.body.password, password);\r\n    if (checkPassword) {\r\n      const token = jwt.sign({\r\n        name: req.body.name,\r\n        role: req.body.role,\r\n      }, 'lagretame', {\r\n        expiresIn: '1h',\r\n      });\r\n\r\n      return res.status(200).json({\r\n        TYPE: 'POST',\r\n        token,\r\n        message: 'Login Successful',\r\n      });\r\n    }\r\n    return res.status(403).json({\r\n      TYPE: 'POST',\r\n      status: 403,\r\n      message: 'Invalid Credentials',\r\n    });\r\n  }\r\n\r\n  //  Updates Users Information\r\n  static updateUser(req, res) {\r\n    const user = {\r\n      name: req.body.name,\r\n      role: req.body.role,\r\n      position: req.body.position,\r\n      password: req.body.password,\r\n    };\r\n\r\n    user.password = bcrypt.hashSync(req.body.password, 10);\r\n\r\n    const updatedFile = func.updateFile('users', user, req.body.name, 'update');\r\n\r\n    if (updatedFile === 'error') {\r\n      return res.status(403).json({\r\n        TYPE: 'GET',\r\n        status: 403,\r\n        message: 'Your request was not succesfull',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      TYPE: 'POST',\r\n      status: 200,\r\n      info: {\r\n        name: req.body.name,\r\n        role: req.body.role,\r\n        position: req.body.position,\r\n        password: req.body.password,\r\n      },\r\n      message: 'User updated Successfully',\r\n    });\r\n  }\r\n\r\n  //  Module that delete user\r\n  static deleteUser(req, res) {\r\n    const deletedFile = func.deleteFile('users', req.body.name);\r\n\r\n    if (deletedFile === 'error') {\r\n      return res.status(403).json({\r\n        TYPE: 'GET',\r\n        status: 403,\r\n        message: 'Your request was not succesfull',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      TYPE: 'POST',\r\n      status: 200,\r\n      info: deletedFile,\r\n      message: 'User Deleted Successfully',\r\n    });\r\n  }\r\n}\r\n\r\nexport default Users;\r\n"]}