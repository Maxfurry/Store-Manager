{"version":3,"sources":["checkAuth.js"],"names":["checkToken","req","res","next","token","headers","authorization","split","jwt","verify","err","tokenData","status","json","info","message","checkAdmin","role"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,MAAI;AACF,QAAMC,QAAQH,IAAII,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;AACA;AACAC,2BAAIC,MAAJ,CAAWL,KAAX,EAAkB,WAAlB,EAA+B,UAACM,GAAD,EAAMC,SAAN,EAAoB;AACjD,UAAID,GAAJ,EAAS;AACP,eAAOR,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,gBAAMJ,GAFoB;AAG1BK,mBAAS;AAHiB,SAArB,CAAP;AAKD;AACD,aAAOZ,MAAP;AACD,KATD;AAUD,GAbD,CAaE,OAAOO,GAAP,EAAY;AACZ,WAAOR,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAQ,GADkB;AAE1BE,YAAMJ,GAFoB;AAG1BK,eAAS;AAHiB,KAArB,CAAP;AAKD;AACF,CArBD;;AAuBA,IAAMC,aAAa,SAAbA,UAAa,CAACf,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,MAAI;AACF,QAAMC,QAAQH,IAAII,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;;AAEAC,2BAAIC,MAAJ,CAAWL,KAAX,EAAkB,WAAlB,EAA+B,UAACM,GAAD,EAAMC,SAAN,EAAoB;AACjD,UAAID,GAAJ,EAAS;AACP,eAAOR,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,gBAAMJ,GAFoB;AAG1BK,mBAAS;AAHiB,SAArB,CAAP;AAKD;AACD;AACA,UAAIJ,UAAUM,IAAV,KAAmB,OAAvB,EAAgC;AAC9B,eAAOd,MAAP;AACD;AACD,aAAOD,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,cAAMJ,GAFoB;AAG1BK,iBAAS;AAHiB,OAArB,CAAP;AAKD,KAjBD;AAkBD,GArBD,CAqBE,OAAOL,GAAP,EAAY;AACZ;AACA,WAAOR,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAQ,GADkB;AAE1BE,YAAMJ,GAFoB;AAG1BK,eAAS;AAHiB,KAArB,CAAP;AAKD;AACF,CA9BD;;kBAgCe,EAAEf,sBAAF,EAAcgB,sBAAd,E","file":"checkAuth.js","sourceRoot":"C:/Users/Peerless/Documents/mine/nodes/Bootcamp/Store-Manager/src/middlewares","sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nconst checkToken = (req, res, next) => {\r\n  try {\r\n    const token = req.headers.authorization.split(' ')[1];\r\n    //  console.log(token)\r\n    jwt.verify(token, 'lagretame', (err, tokenData) => {\r\n      if (err) {\r\n        return res.status(403).json({\r\n          status: 403,\r\n          info: err,\r\n          message: 'Authentication fail, Please provide valid Token',\r\n        });\r\n      }\r\n      return next();\r\n    });\r\n  } catch (err) {\r\n    return res.status(403).json({\r\n      status: 403,\r\n      info: err,\r\n      message: 'Authentication fail, Please provide valid Token',\r\n    });\r\n  }\r\n};\r\n\r\nconst checkAdmin = (req, res, next) => {\r\n  try {\r\n    const token = req.headers.authorization.split(' ')[1];\r\n\r\n    jwt.verify(token, 'lagretame', (err, tokenData) => {\r\n      if (err) {\r\n        return res.status(403).json({\r\n          status: 403,\r\n          info: err,\r\n          message: 'You are not authorized',\r\n        });\r\n      }\r\n      //  Check if it is an Admin\r\n      if (tokenData.role === 'admin') {\r\n        return next();\r\n      }\r\n      return res.status(403).json({\r\n        status: 403,\r\n        info: err,\r\n        message: 'You are not authorized',\r\n      });\r\n    });\r\n  } catch (err) {\r\n    //    console.log(err);\r\n    return res.status(403).json({\r\n      status: 403,\r\n      info: err,\r\n      message: 'Authentication fail, Please provide valid Token',\r\n    });\r\n  }\r\n};\r\n\r\nexport default { checkToken, checkAdmin };\r\n"]}