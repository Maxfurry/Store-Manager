{"version":3,"sources":["functions.js"],"names":["readFile","fileName","Id","fileData","fs","readFileSync","arrayOfObjects","JSON","parse","updateFile","dataToAdd","whereToAdd","flag","data","updatedData","writeFileSync","stringify","updatedFile","deleteFile","deleteWhat","deletedData","deletedFile"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA,IAAMA,WAAW,SAAXA,QAAW,CAACC,QAAD,EAAWC,EAAX,EAAkB;AACjC;AACA,MAAMC,WAAWC,aAAGC,YAAH,mBAAgCJ,QAAhC,YAAiD,OAAjD,CAAjB;;AAEA,MAAMK,iBAAiBC,KAAKC,KAAL,CAAWL,QAAX,CAAvB;;AAEA;AACA,MAAI,CAACD,EAAL,EAAS;AACP,WAAOI,cAAP;AACD;;AAED,SAAOA,eAAeJ,EAAf,CAAP;AACD,CAZD;;AAcA;AACA,IAAMO,aAAa,SAAbA,UAAa,CAACR,QAAD,EAAWS,SAAX,EAAsBC,UAAtB,EAAkCC,IAAlC,EAA2C;AAC5D;AACA,MAAMC,OAAOb,SAASC,QAAT,CAAb;;AAEA;AACA,MAAI,CAACY,IAAL,EAAW;AACT,WAAO,OAAP;AACD;;AAED,MAAMC,cAAcD,IAApB;;AAEA;AACA,MAAIA,KAAKF,UAAL,KAAoBC,SAAS,QAAjC,EAA2C;AACzC,WAAO,OAAP;AACD;;AAEDC,OAAKF,UAAL,IAAmBD,SAAnB;;AAEA;AACA,MAAI,CAACI,WAAD,IAAgBF,SAAS,QAA7B,EAAuC;AACrC,WAAO,OAAP;AACD;;AAED;AACAR,eAAGW,aAAH,mBAAiCd,QAAjC,YAAkDM,KAAKS,SAAL,CAAeH,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAlD,EAAiF,OAAjF;;AAEA,MAAMI,cAAcjB,SAASC,QAAT,CAApB;;AAEA;AACA,MAAIa,gBAAgBG,WAApB,EAAiC;AAC/B,WAAO,OAAP;AACD;;AAED,SAAOH,WAAP;AACD,CAlCD;;AAoCA;AACA,IAAMI,aAAa,SAAbA,UAAa,CAACjB,QAAD,EAAWkB,UAAX,EAA0B;AAC3C,MAAMN,OAAOb,SAASC,QAAT,CAAb;;AAEA;AACA,MAAI,CAACY,IAAL,EAAW;AACT,WAAO,OAAP;AACD;;AAED,MAAMO,cAAcP,KAAKM,UAAL,CAApB;;AAEA,MAAI,CAACC,WAAL,EAAkB;AAChB,WAAO,OAAP;AACD;;AAED;AACA,SAAOP,KAAKM,UAAL,CAAP;AACAf,eAAGW,aAAH,mBAAiCd,QAAjC,YAAkDM,KAAKS,SAAL,CAAeH,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAlD,EAAiF,OAAjF;;AAEA,MAAMQ,cAAcrB,SAASC,QAAT,CAApB;;AAEA;AACA,MAAIY,SAASQ,WAAb,EAA0B;AACxB,WAAO,OAAP;AACD;;AAED,SAAOD,WAAP;AACD,CA1BD;;kBA4Be,EAAEpB,kBAAF,EAAYS,sBAAZ,EAAwBS,sBAAxB,E","file":"functions.js","sourceRoot":"C:/Users/Peerless/Documents/mine/nodes/Bootcamp/Store-Manager/src/middlewares","sourcesContent":["import fs from 'fs';\r\n\r\n// Function to read file\r\nconst readFile = (fileName, Id) => {\r\n  //  Read file\r\n  const fileData = fs.readFileSync(`src/model/db/${fileName}.json`, 'utf-8');\r\n\r\n  const arrayOfObjects = JSON.parse(fileData);\r\n\r\n  // Checks if a specific data was requested\r\n  if (!Id) {\r\n    return arrayOfObjects;\r\n  }\r\n\r\n  return arrayOfObjects[Id];\r\n};\r\n\r\n// Function to write or update file\r\nconst updateFile = (fileName, dataToAdd, whereToAdd, flag) => {\r\n  // Get specific data\r\n  const data = readFile(fileName);\r\n\r\n  // Ensures getting data was successfull\r\n  if (!data) {\r\n    return 'error';\r\n  }\r\n\r\n  const updatedData = data;\r\n\r\n  //  Flag to check create\r\n  if (data[whereToAdd] && flag === 'create') {\r\n    return 'exist';\r\n  }\r\n\r\n  data[whereToAdd] = dataToAdd;\r\n\r\n  // Flag to check update\r\n  if (!updatedData && flag === 'update') {\r\n    return 'error';\r\n  }\r\n\r\n  // Write to the file\r\n  fs.writeFileSync(`src/model/db/${fileName}.json`, JSON.stringify(data, null, 2), 'utf-8');\r\n\r\n  const updatedFile = readFile(fileName);\r\n\r\n  // Ensures data was written\r\n  if (updatedData === updatedFile) {\r\n    return 'error';\r\n  }\r\n\r\n  return updatedData;\r\n};\r\n\r\n// Function to delete data from file\r\nconst deleteFile = (fileName, deleteWhat) => {\r\n  const data = readFile(fileName);\r\n\r\n  // Ensures getting data was successfull\r\n  if (!data) {\r\n    return 'error';\r\n  }\r\n\r\n  const deletedData = data[deleteWhat];\r\n\r\n  if (!deletedData) {\r\n    return 'error';\r\n  }\r\n\r\n  // Delete the data\r\n  delete data[deleteWhat];\r\n  fs.writeFileSync(`src/model/db/${fileName}.json`, JSON.stringify(data, null, 2), 'utf-8');\r\n\r\n  const deletedFile = readFile(fileName);\r\n\r\n  // Ensures data was deleted\r\n  if (data === deletedFile) {\r\n    return 'error';\r\n  }\r\n\r\n  return deletedData;\r\n};\r\n\r\nexport default { readFile, updateFile, deleteFile };\r\n"]}